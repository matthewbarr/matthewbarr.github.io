<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Random Natterings]]></title>
  <link href="http://blog.mbarr.net/atom.xml" rel="self"/>
  <link href="http://blog.mbarr.net/"/>
  <updated>2014-05-22T15:57:23-04:00</updated>
  <id>http://blog.mbarr.net/</id>
  <author>
    <name><![CDATA[Matthew Barr]]></name>
    <email><![CDATA[mbarr@mbarr.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puppet for Packer &amp; Docker]]></title>
    <link href="http://blog.mbarr.net/blog/2014/05/22/puppet-for-packer-and-docker/"/>
    <updated>2014-05-22T15:22:20-04:00</updated>
    <id>http://blog.mbarr.net/blog/2014/05/22/puppet-for-packer-and-docker</id>
    <content type="html"><![CDATA[<p>In <a href="http://blog.mbarr.net/blog/2014/05/22/moving-to-librarian-puppet/">Moving to Librarian-puppet</a> I mentioned that we needed to keep 3 different sets of puppet stacks around.  I thought I&rsquo;d expand on it.</p>

<p>There will likely be a part 2, &amp; maybe 3, as I describe what we have inside our puppet provisioner code for packer, and then later for docker&hellip;</p>

<p>We&rsquo;re using 2 different sets of puppet stacks, similar, but not quite the same, and testing a third:</p>

<ol>
<li>one to build AMI&rsquo;s, installing software, but typically not starting it.</li>
<li>the full build</li>
<li>testing docker</li>
</ol>


<p>These are different because we install and start different parts based on which portion of the build is involved.</p>

<h4>Packer</h4>

<p>For Packer, we want to install all the pieces, especially packages with large dependency chains.  We <em>don&rsquo;t</em> want to start services, but putting config files in place is helpful.  We also currently put a copy of the code git checkout in place, so that VCSrepo updates can happen very quickly, only needing to download delta&rsquo;s from upstream.</p>

<h4>Full Build</h4>

<p>In the full build, we need to make sure that everything is installed, and running.  We also add some runtime cache cleanup code that wouldn&rsquo;t be helpful in the packer AMI build, and also leave out some scripts that update mcollective caches and drop extra facts into it&rsquo;s cache. <a href="https://github.com/puppetlabs/puppetlabs-mcollective/pull/109">Extra Yaml in mco</a></p>

<h4>Docker</h4>

<p>Docker is new target for us.  We&rsquo;re hoping to move to move to Docker for building containers with our code + virtualenv &amp; running either celery or uwsgi.  We hope to be able to use the same artifacts from dev-> prod, and that it will make life easier to update running versions of code.</p>

<p>However, we will still build AMI&rsquo;s for the host systems, running mcollective &amp; puppet, sensu for monitoring, and probably the nginx webserver/proxy for the uwsgi containers.  We&rsquo;ll also include in the packer built AMI&rsquo;s the docker images, so these systems can be deployed via autoscaling.</p>

<p>This will mean we&rsquo;ll have a different set of requirements for puppet in the docker systems.  We&rsquo;ll be getting rid of much of the code deployment related functions, but still keeping most of the other parts.   And we&rsquo;ll have to add docker related functionality &amp; mgmt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to Librarian-puppet]]></title>
    <link href="http://blog.mbarr.net/blog/2014/05/22/moving-to-librarian-puppet/"/>
    <updated>2014-05-22T10:47:01-04:00</updated>
    <id>http://blog.mbarr.net/blog/2014/05/22/moving-to-librarian-puppet</id>
    <content type="html"><![CDATA[<p>So&hellip; The office hit a point where I had way too many modules installed from the forge &amp; git, and it was past the point of being a problem.</p>

<p>(Beyond the maintenance problem, we also hit an issue for using <a href="http://blog.mbarr.net/blog/2014/05/22/puppet-for-packer-and-docker/">Packer &amp; Docker</a> )</p>

<p>We&rsquo;ve implemented a hybrid roles &amp; providers model, so we end up w/ quite a few custom modules for our needs.</p>

<p>We had 45 modules.  It was starting to get difficult to find our library modules, from our custom ones.</p>

<p>I&rsquo;ve seen people talking about <a href="https://github.com/rodjek/librarian-puppet">Librarian Puppet</a>, and about <a href="https://github.com/adrienthebo/r10k">R10K</a>.</p>

<p>(FYI: <a href="http://garylarizza.com/blog/2014/02/18/puppet-workflow-part-3/">http://garylarizza.com/blog/2014/02/18/puppet-workflow-part-3/</a> is a very explanation of why you might use R10K, and how..)</p>

<p>However, I <em>really</em> didn&rsquo;t want to have to move all my code to a new repo, and especially didn&rsquo;t want to move each module to it&rsquo;s <em>own</em> repo.  This is all being maintained by one person right now, and the dev&rsquo;s have enough trouble w/ it being in it&rsquo;s own repo, vs the main code repo.</p>

<p>Eventually I realized that I could move the custom modules to their own module directory, and use the main &ldquo;modules&rdquo; directory for librarian-puppet.</p>

<p>In order for this to work, I had to modify puppet.conf to have</p>

<pre><code>modulepath =  $confdir/modules-local:$confdir/modules
</code></pre>

<p>On my server w/ (older, pre 3.5) dynamic environments, I used:</p>

<pre><code>    modulepath =  $confdir/environments/$environment/modules-local:$confdir/environments/$environment/modules
</code></pre>

<p>Once the Puppetfile was created, I just had to run:</p>

<pre><code>librarian-puppet install
</code></pre>

<p>Here&rsquo;s the Puppetfile we used, and what it produces:</p>

<figure class='code'><figcaption><span>Puppetfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>forge "http://forge.puppetlabs.com"
</span><span class='line'>
</span><span class='line'>mod "rodjek/logrotate"
</span><span class='line'>
</span><span class='line'>mod "elasticsearch/logstash"
</span><span class='line'>mod "elasticsearch/elasticsearch"
</span><span class='line'>mod "sensu/sensu"
</span><span class='line'>mod "garethr/graphite"
</span><span class='line'>
</span><span class='line'>mod "puppetlabs/ntp"
</span><span class='line'>mod "puppetlabs/mcollective",
</span><span class='line'>  :git =&gt; 'https://github.com/matthewbarr/puppetlabs-mcollective.git',
</span><span class='line'>  :ref =&gt; 'kensho'
</span><span class='line'>
</span><span class='line'>mod "puppetlabs/vcsrepo"
</span><span class='line'>mod "puppetlabs/git"
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>mod "jfryman/nginx"
</span><span class='line'>mod "puppetlabs/inifile"
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Generates:</p>

<figure class='code'><figcaption><span>Puppetfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>modules
</span><span class='line'>├── elasticsearch-elasticsearch (v0.3.2)
</span><span class='line'>├── elasticsearch-logstash (v0.5.1)
</span><span class='line'>├── footballradar-python (v0.1.0)
</span><span class='line'>├── garethr-graphite (v0.3.0)
</span><span class='line'>├── ispavailability-file_concat (v0.1.0)
</span><span class='line'>├── jfryman-nginx (v0.0.9)
</span><span class='line'>├── mcollective (???)
</span><span class='line'>├── nanliu-staging (v0.4.0)
</span><span class='line'>├── puppetlabs-activemq (v0.2.0)
</span><span class='line'>├── puppetlabs-apache (v0.6.0)
</span><span class='line'>├── puppetlabs-apt (v1.4.2)
</span><span class='line'>├── puppetlabs-concat (v1.1.0)
</span><span class='line'>├── puppetlabs-firewall (v1.1.1)
</span><span class='line'>├── puppetlabs-git (v0.0.3)
</span><span class='line'>├── puppetlabs-inifile (v1.0.3)
</span><span class='line'>├── puppetlabs-java (v1.1.1)
</span><span class='line'>├── puppetlabs-java_ks (v1.2.3)
</span><span class='line'>├── puppetlabs-ntp (v3.0.3)
</span><span class='line'>├── puppetlabs-rabbitmq (v4.0.0)
</span><span class='line'>├── puppetlabs-stdlib (v4.2.1)
</span><span class='line'>├── puppetlabs-vcsrepo (v0.2.0)
</span><span class='line'>├── richardc-datacat (v0.4.3)
</span><span class='line'>├── rodjek-logrotate (v1.0.2)
</span><span class='line'>└── sensu-sensu (v1.0.0)</span></code></pre></td></tr></table></div></figure>


<p>Which is 26/45 of my original modules.  I was also able to remove a few dependencies, and upgraded a few of the modules.  (Which why you only see 24 modules listed above..)</p>

<p>It also meant that I had to extract my changes to a few upstream modules, and send them up as PR&rsquo;s.  In the end, the only critical one was a few modifications to the puppetlabs-mcollective module, which is why I&rsquo;m currently using a git fork.  PR&rsquo;s have been raised for most of the changes, but they aren&rsquo;t live yet.</p>

<ul>
<li><a href="https://github.com/puppetlabs/puppetlabs-mcollective/pull/109">Extra Yaml in mco</a> Needs more work.</li>
<li><a href="https://github.com/puppetlabs/puppetlabs-mcollective/pull/145">Remove Erlang dependency</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uhm... Hello?]]></title>
    <link href="http://blog.mbarr.net/blog/2014/01/12/uhm-dot-dot-dot-hello/"/>
    <updated>2014-01-12T01:29:12-05:00</updated>
    <id>http://blog.mbarr.net/blog/2014/01/12/uhm-dot-dot-dot-hello</id>
    <content type="html"><![CDATA[<p>So, this is the new blog.  I&rsquo;m hoping to talk about some of the things currently going on professionally, between puppet work, some inputs from #monitoringsucks responses, and various other things.</p>

<p>I&rsquo;m probably going to flit from topic to topic, and may post some of my code that I&rsquo;m working.</p>

<p>I&rsquo;m also intersted in how to effectivly build new systes in a resilient fashion, inside AWS.</p>

<p>Somewhere in there, we may even have to build a dashboard for self service.</p>

<p>Coming up, in no particular order:</p>

<ul>
<li>heira_params &ndash; because I don&rsquo;t want to bother with an ENC.</li>
<li>puppet resillancy with a multi-AZ &amp; multi-region app.</li>
<li>App redundancy for the same..  or how to survive an AWS zone/region outage</li>
<li>metrics, monitoring, and more.</li>
</ul>

]]></content>
  </entry>
  
</feed>
