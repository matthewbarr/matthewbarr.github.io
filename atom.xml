<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Random Natterings]]></title>
  <link href="http://blog.mbarr.net/atom.xml" rel="self"/>
  <link href="http://blog.mbarr.net/"/>
  <updated>2014-05-22T17:13:01-04:00</updated>
  <id>http://blog.mbarr.net/</id>
  <author>
    <name><![CDATA[Matthew Barr]]></name>
    <email><![CDATA[mbarr@mbarr.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puppet for Packer &amp; Docker]]></title>
    <link href="http://blog.mbarr.net/blog/2014/05/22/puppet-for-packer-and-docker/"/>
    <updated>2014-05-22T15:22:20-04:00</updated>
    <id>http://blog.mbarr.net/blog/2014/05/22/puppet-for-packer-and-docker</id>
    <content type="html"><![CDATA[<p>In <a href="http://blog.mbarr.net/blog/2014/05/22/moving-to-librarian-puppet/">Moving to Librarian-puppet</a> I mentioned that we needed to keep 3 different sets of puppet stacks around.  I thought I&rsquo;d expand on it.</p>

<p>There will likely be a part 2, &amp; maybe 3, as I describe what we have inside our puppet provisioner code for packer, and then later for docker&hellip;</p>

<p>We&rsquo;re using 2 different sets of puppet stacks, similar, but not quite the same, and testing a third:</p>

<ol>
<li>one to build AMI&rsquo;s, installing software, but typically not starting it.</li>
<li>the full build</li>
<li>testing docker</li>
</ol>


<p>These are different because we install and start different parts based on which portion of the build is involved.</p>

<h4>Packer</h4>

<p>For Packer, we want to install all the pieces, especially packages with large dependency chains.  We <em>don&rsquo;t</em> want to start services, but putting config files in place is helpful.  We also currently put a copy of the code git checkout in place, so that VCSrepo updates can happen very quickly, only needing to download delta&rsquo;s from upstream.</p>

<h4>Full Build</h4>

<p>In the full build, we need to make sure that everything is installed, and running.  We also add some runtime cache cleanup code that wouldn&rsquo;t be helpful in the packer AMI build, and also leave out some scripts that update mcollective caches and drop extra facts into it&rsquo;s cache. <a href="https://github.com/puppetlabs/puppetlabs-mcollective/pull/109">Extra Yaml in mco</a></p>

<h4>Docker</h4>

<p>Docker is new target for us.  We&rsquo;re hoping to move to move to Docker for building containers with our code + virtualenv &amp; running either celery or uwsgi.  We hope to be able to use the same artifacts from dev-> prod, and that it will make life easier to update running versions of code.</p>

<p>However, we will still build AMI&rsquo;s for the host systems, running mcollective &amp; puppet, sensu for monitoring, and probably the nginx webserver/proxy for the uwsgi containers.  We&rsquo;ll also include in the packer built AMI&rsquo;s the docker images, so these systems can be deployed via autoscaling.</p>

<p>This will mean we&rsquo;ll have a different set of requirements for puppet in the docker systems.  We&rsquo;ll be getting rid of much of the code deployment related functions, but still keeping most of the other parts.   And we&rsquo;ll have to add docker related functionality &amp; mgmt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to Librarian-puppet]]></title>
    <link href="http://blog.mbarr.net/blog/2014/05/22/moving-to-librarian-puppet/"/>
    <updated>2014-05-22T10:47:01-04:00</updated>
    <id>http://blog.mbarr.net/blog/2014/05/22/moving-to-librarian-puppet</id>
    <content type="html"><![CDATA[<p>So&hellip; The office hit a point where I had way too many modules installed from the forge &amp; git, and it was past the point of being a problem.</p>

<p>(Beyond the maintenance problem, we also hit an issue for using <a href="http://blog.mbarr.net/blog/2014/05/22/puppet-for-packer-and-docker/">Packer &amp; Docker</a> )</p>

<p>We&rsquo;ve implemented a hybrid roles &amp; providers model, so we end up w/ quite a few custom modules for our needs.</p>

<p>We had 45 modules.  It was starting to get difficult to find our library modules, from our custom ones.</p>

<p>I&rsquo;ve seen people talking about <a href="https://github.com/rodjek/librarian-puppet">Librarian Puppet</a>, and about <a href="https://github.com/adrienthebo/r10k">R10K</a>.</p>

<p>(FYI: <a href="http://garylarizza.com/blog/2014/02/18/puppet-workflow-part-3/">http://garylarizza.com/blog/2014/02/18/puppet-workflow-part-3/</a> is a very explanation of why you might use R10K, and how..)</p>

<p>However, I <em>really</em> didn&rsquo;t want to have to move all my code to a new repo, and especially didn&rsquo;t want to move each module to it&rsquo;s <em>own</em> repo.  This is all being maintained by one person right now, and the dev&rsquo;s have enough trouble w/ it being in it&rsquo;s own repo, vs the main code repo.</p>

<p>Eventually I realized that I could move the custom modules to their own module directory, and use the main &ldquo;modules&rdquo; directory for librarian-puppet.</p>

<p>In order for this to work, I had to modify puppet.conf to have</p>

<pre><code>modulepath =  $confdir/modules-local:$confdir/modules
</code></pre>

<p>On my server w/ (older, pre 3.5) dynamic environments, I used:</p>

<pre><code>    modulepath =  $confdir/environments/$environment/modules-local:$confdir/environments/$environment/modules
</code></pre>

<p>Once the Puppetfile was created, I just had to run:</p>

<pre><code>librarian-puppet install
</code></pre>

<p>Here&rsquo;s the Puppetfile we used, and what it produces:</p>

<figure class='code'><figcaption><span>Puppetfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>forge "http://forge.puppetlabs.com"
</span><span class='line'>
</span><span class='line'>mod "rodjek/logrotate"
</span><span class='line'>
</span><span class='line'>mod "elasticsearch/logstash"
</span><span class='line'>mod "elasticsearch/elasticsearch"
</span><span class='line'>mod "sensu/sensu"
</span><span class='line'>mod "garethr/graphite"
</span><span class='line'>
</span><span class='line'>mod "puppetlabs/ntp"
</span><span class='line'>mod "puppetlabs/mcollective",
</span><span class='line'>  :git =&gt; 'https://github.com/matthewbarr/puppetlabs-mcollective.git',
</span><span class='line'>  :ref =&gt; 'kensho'
</span><span class='line'>
</span><span class='line'>mod "puppetlabs/vcsrepo"
</span><span class='line'>mod "puppetlabs/git"
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>mod "jfryman/nginx"
</span><span class='line'>mod "puppetlabs/inifile"
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Generates:</p>

<figure class='code'><figcaption><span>Puppetfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>modules
</span><span class='line'>├── elasticsearch-elasticsearch (v0.3.2)
</span><span class='line'>├── elasticsearch-logstash (v0.5.1)
</span><span class='line'>├── footballradar-python (v0.1.0)
</span><span class='line'>├── garethr-graphite (v0.3.0)
</span><span class='line'>├── ispavailability-file_concat (v0.1.0)
</span><span class='line'>├── jfryman-nginx (v0.0.9)
</span><span class='line'>├── mcollective (???)
</span><span class='line'>├── nanliu-staging (v0.4.0)
</span><span class='line'>├── puppetlabs-activemq (v0.2.0)
</span><span class='line'>├── puppetlabs-apache (v0.6.0)
</span><span class='line'>├── puppetlabs-apt (v1.4.2)
</span><span class='line'>├── puppetlabs-concat (v1.1.0)
</span><span class='line'>├── puppetlabs-firewall (v1.1.1)
</span><span class='line'>├── puppetlabs-git (v0.0.3)
</span><span class='line'>├── puppetlabs-inifile (v1.0.3)
</span><span class='line'>├── puppetlabs-java (v1.1.1)
</span><span class='line'>├── puppetlabs-java_ks (v1.2.3)
</span><span class='line'>├── puppetlabs-ntp (v3.0.3)
</span><span class='line'>├── puppetlabs-rabbitmq (v4.0.0)
</span><span class='line'>├── puppetlabs-stdlib (v4.2.1)
</span><span class='line'>├── puppetlabs-vcsrepo (v0.2.0)
</span><span class='line'>├── richardc-datacat (v0.4.3)
</span><span class='line'>├── rodjek-logrotate (v1.0.2)
</span><span class='line'>└── sensu-sensu (v1.0.0)</span></code></pre></td></tr></table></div></figure>


<p>Which is 26/45 of my original modules.  I was also able to remove a few dependencies, and upgraded a few of the modules.  (Which why you only see 24 modules listed above..)</p>

<p>It also meant that I had to extract my changes to a few upstream modules, and send them up as PR&rsquo;s.  In the end, the only critical one was a few modifications to the puppetlabs-mcollective module, which is why I&rsquo;m currently using a git fork.  PR&rsquo;s have been raised for most of the changes, but they aren&rsquo;t live yet.</p>

<ul>
<li><a href="https://github.com/puppetlabs/puppetlabs-mcollective/pull/109">Extra Yaml in mco</a> Needs more work.</li>
<li><a href="https://github.com/puppetlabs/puppetlabs-mcollective/pull/145">Remove Erlang dependency</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uhm... Hello?]]></title>
    <link href="http://blog.mbarr.net/blog/2014/01/12/uhm-dot-dot-dot-hello/"/>
    <updated>2014-01-12T01:29:12-05:00</updated>
    <id>http://blog.mbarr.net/blog/2014/01/12/uhm-dot-dot-dot-hello</id>
    <content type="html"><![CDATA[<p>So, this is the new blog.  I&rsquo;m hoping to talk about some of the things currently going on professionally, between puppet work, some inputs from #monitoringsucks responses, and various other things.</p>

<p>I&rsquo;m probably going to flit from topic to topic, and may post some of my code that I&rsquo;m working.</p>

<p>I&rsquo;m also intersted in how to effectivly build new systes in a resilient fashion, inside AWS.</p>

<p>Somewhere in there, we may even have to build a dashboard for self service.</p>

<p>Coming up, in no particular order:</p>

<ul>
<li>heira_params &ndash; because I don&rsquo;t want to bother with an ENC.</li>
<li>puppet resillancy with a multi-AZ &amp; multi-region app.</li>
<li>App redundancy for the same..  or how to survive an AWS zone/region outage</li>
<li>metrics, monitoring, and more.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql Slave Corrupted Relay Log]]></title>
    <link href="http://blog.mbarr.net/blog/2013/07/26/mysql-slave-corrupted-relay-log/"/>
    <updated>2013-07-26T12:22:58-04:00</updated>
    <id>http://blog.mbarr.net/blog/2013/07/26/mysql-slave-corrupted-relay-log</id>
    <content type="html"><![CDATA[<p>If you have a slave that has a corrupted relay log, it will show:
<code>Last_Error: Could not parse relay log event entry. The possible reasons are: the master's binary log is corrupted (you can check this by running 'mysqlbinlog' on the binary log), the slave's relay log is corrupted (you can check this by running 'mysqlbinlog' on the relay log), a network problem, or a bug in the master's or slave's MySQL code. If you want to check the master's binary log or slave's relay log, you will be able to know their names by issuing 'SHOW SLAVE STATUS' on this slave.</code>
in it&rsquo;s mysqld.log &amp; slave status.</p>

<p>This can happen because of a crash on the mysql slave, or a disk filling up, or something.</p>

<p>You can fix it by executing on the slave in question:</p>

<ol>
<li>STOP SLAVE</li>
<li>SHOW SLAVE STATUS</li>
<li>Note down ‘Relay_Master_Log_File’ and ‘Exec_Master_Log_Pos’ entries.</li>
<li>RESET SLAVE</li>
<li>CHANGE MASTER TO ….. (use MASTER_LOG_FILE=relay_master_log_file and MASTER_LOG_POS=exec_master_log_pos from Step 3)</li>
<li>START SLAVE</li>
</ol>


<p>For example, #5 might be something like:</p>

<pre><code>change master to master_log_file="mysql-bin.001878",master_log_pos=898514732;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPA Server & Client Commands]]></title>
    <link href="http://blog.mbarr.net/blog/2013/07/26/ipa-server-client-commands/"/>
    <updated>2013-07-26T12:19:37-04:00</updated>
    <id>http://blog.mbarr.net/blog/2013/07/26/ipa-server-client-commands</id>
    <content type="html"><![CDATA[<p>Not that this isn&rsquo;t available elsewhere, but&hellip; just keeping it nicely stored somewhere for myself.</p>

<p>on ipa server:</p>

<pre><code>ipa host-add host.example.com --password=MEEEEEP --force
</code></pre>

<p>on client:</p>

<pre><code>ipa-client-install --hostname=host.example.com --domain=example.com --password=MEEEEEP --realm=EXAMPLE.COM --server=ipa.example.com --unattended --mkhomedir
</code></pre>

<hr />

<figure class='code'><figcaption><span>Hostadd.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">echo</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;ipa host-add $1.example.com --password=MEEEEEP --force&quot;</span>
</span><span class='line'><span class="nb">echo</span>
</span><span class='line'><span class="nb">echo</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;ipa-client-install --hostname=$1.example.com --domain=example.com  --password=MEEEEEP --realm=EXAMPLE.COM --server=ipa.example.com --unattended --mkhomedir&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>Uninstall IPA</p>

<figure class='code'><figcaption><span>Uninstall IPA</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@solr05 ~<span class="o">]</span><span class="c"># ipa-client-install --uninstall -U</span>
</span><span class='line'>Unenrolling client from IPA server
</span><span class='line'>Removing Kerberos service principals from /etc/krb5.keytab
</span><span class='line'>Disabling client Kerberos and LDAP configurations
</span><span class='line'>Restoring client configuration files
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change IPA Password Expiration for a Bunch of Users]]></title>
    <link href="http://blog.mbarr.net/blog/2013/07/26/change-ipa-password-expiration-for-a-bunch-of-users/"/>
    <updated>2013-07-26T12:13:42-04:00</updated>
    <id>http://blog.mbarr.net/blog/2013/07/26/change-ipa-password-expiration-for-a-bunch-of-users</id>
    <content type="html"><![CDATA[<p>Run this on a ipa server.  It&rsquo;ll work there..</p>

<ol>
<li><p>Find users with passwords that expire before DATE below</p>

<pre><code> ldapsearch -Y GSSAPI -h localhost -b "cn=users,cn=accounts,dc=ayisnap,dc=com" '(krbPasswordExpiration&lt;=20140101000000Z)'&gt;lsearch2`
</code></pre></li>
<li><p>Change the actual expiration date for those users to date :1/1/2015.</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep dn lsearch2  &gt; dn
</span><span class='line'><span class="nv">IFS</span><span class="o">=</span><span class="s1">$&#39;\n&#39;</span>
</span><span class='line'><span class="k">for </span>i in  <span class="sb">`</span>cat dn<span class="sb">`</span>;
</span><span class='line'>  <span class="k">do </span><span class="nb">echo</span> <span class="nv">$i</span>;
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;changetype: modify&quot;</span>;
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;replace: krbpasswordexpiration&quot;</span>;
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;krbpasswordexpiration: 20150101000000Z&quot;</span>;
</span><span class='line'>  <span class="nb">echo</span> ;
</span><span class='line'><span class="k">done</span> &gt; <span class="nb">test</span>
</span><span class='line'>ldapmodify -D <span class="s2">&quot;cn=Directory Manager&quot;</span> -W -h localhost -f <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building FPM on RHEL]]></title>
    <link href="http://blog.mbarr.net/blog/2013/07/26/building-fpm-on-rhel/"/>
    <updated>2013-07-26T11:57:28-04:00</updated>
    <id>http://blog.mbarr.net/blog/2013/07/26/building-fpm-on-rhel</id>
    <content type="html"><![CDATA[<p>(If you have a version of FPM installed, you may want to remove &amp; install the newest version before building&hellip;)</p>

<p>Building FPM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install --install-dir /tmp/gems fpm
</span><span class='line'><span class="nb">cd</span> /tmp/gems/cache/
</span><span class='line'>
</span><span class='line'>fpm -s gem -t rpm -d rpm-build -d rubygems -d ruby -d ruby-devel -d kernel-devel -d gcc -d gcc-c++ -d make -e fpm*.gem
</span></code></pre></td></tr></table></div></figure>


<p>Building other gems:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fpm -s gem -t rpm -d rubygems -d ruby *.gem
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BlockDiag Network Maps on RHEL]]></title>
    <link href="http://blog.mbarr.net/blog/2013/07/26/blockdiag-network-maps-on-rhel/"/>
    <updated>2013-07-26T11:50:15-04:00</updated>
    <id>http://blog.mbarr.net/blog/2013/07/26/blockdiag-network-maps-on-rhel</id>
    <content type="html"><![CDATA[<p>To install blockdiag:</p>

<pre><code>yum install python-reportlab python-imaging
easy_install "blockdiag[pdf]"
</code></pre>

<p>Generate a pdf</p>

<pre><code>nwdiag -Tpdf routing.diag -f /usr/share/fonts/dejavu/DejaVuSans.ttf
</code></pre>

<p>Generate a SVG</p>

<pre><code>nwdiag -Tsvg routing.diag
</code></pre>

<p>Generate a png.  (Not as pretty, actually.)</p>

<pre><code>nwdiag routing.diag
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RHEL / Centos 6 Software Collections]]></title>
    <link href="http://blog.mbarr.net/blog/2013/06/27/rhel-centos-6-software-collections/"/>
    <updated>2013-06-27T17:14:14-04:00</updated>
    <id>http://blog.mbarr.net/blog/2013/06/27/rhel-centos-6-software-collections</id>
    <content type="html"><![CDATA[<p>So, there&rsquo;s a new way to use multiple versions of languages, such as Ruby, on RHEL, without breaking the system.  I&rsquo;ve got this down, so I thought I should share it.</p>

<p>In this case, it&rsquo;s replacing the need for RVM, and moving to a much more standardized system.  I <del>don&rsquo;t love</del> can&rsquo;t stand having GCC installed on production servers, so this is much better.</p>

<p>SCL &ndash; Software Collections :)</p>

<p>The goal of this was to get a recent version of Fog working on RHEL 6 / Centos 6.</p>

<p>First:  get the SCL repo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /etc/yum.repos.d<span class="sb">`</span>
</span><span class='line'>wget http://people.redhat.com/bkabrda/scl_ruby193.repo
</span></code></pre></td></tr></table></div></figure>


<p>That gives you the basics, but we also need to get some pieces for Fog, compiled for SCL. Thanks to the Katello Project, which is packaging Fog for use w/ Foreman, we can add their repo. You&rsquo;ll have to make a repo for this, though:</p>

<p><a href="http://fedorapeople.org/groups/katello/releases/yum/foreman-nightly/RHEL/6Server/x86_64/">http://fedorapeople.org/groups/katello/releases/yum/foreman-nightly/RHEL/6Server/x86_64/</a></p>

<p>&mdash;You could probably use that as your repo for ruby_193, even without the above scl repo.</p>

<p>This is what the repo file would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[foreman-nightly]
</span><span class='line'>name=Foreman Nightly
</span><span class='line'>baseurl=http://fedorapeople.org/groups/katello/releases/yum/foreman-nightly/RHEL/6Server/x86_64/
</span><span class='line'>enabled=1
</span><span class='line'>gpgcheck=0</span></code></pre></td></tr></table></div></figure>


<h3>Now, install ruby_193:</h3>

<pre><code>yum install ruby193-ruby ruby193-rubygem-fog   ruby193-rubygem-rbvmomi
</code></pre>

<p>Now, you can use it:</p>

<pre><code>scl enable ruby193 bash
which ruby
</code></pre>

<hr />

<p>One thing, if you want to use ruby_193 inside scripts, you can use a stub for it:</p>

<pre><code>/usr/bin/ruby193-ruby
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet Sshkey + IPA + Centos = Odd Failure of Ssh Known_hosts]]></title>
    <link href="http://blog.mbarr.net/blog/2013/06/19/puppet-sshkey-ipa-centos-odd-failure-of-ssh-known_hosts/"/>
    <updated>2013-06-19T16:48:05-04:00</updated>
    <id>http://blog.mbarr.net/blog/2013/06/19/puppet-sshkey-ipa-centos-odd-failure-of-ssh-known_hosts</id>
    <content type="html"><![CDATA[<p>Recently saw this at work:</p>

<p><em>Server with IPA (freeipa.org), running puppet 3.X (3.2.1, but not really relevant.)  Centos 6.4.</em></p>

<h2>Normally</h2>

<p>Puppet&rsquo;s <a href="http://docs.puppetlabs.com/references/latest/type.html#sshkey">sshkey type</a>  creates /etc/ssh/ssh_known_hosts by default.</p>

<p>SSH defaults to checking /etc/ssh/ssh_known_hosts &amp; /etc/ssh/ssh_known_hosts2, if GlobalKnownHostsFile isn&rsquo;t set inside <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh_config">ssh_config</a>.   RHEL / Centos doesn&rsquo;t have it in the default config file, so it&rsquo;s probably using the default for you.</p>

<p>All very good.</p>

<p>BTW- they could fix a long time sshkey bug: <a href="https://projects.puppetlabs.com/issues/4145">https://projects.puppetlabs.com/issues/4145</a> &ndash; it defaults to mode 600, which really needs to be 644 to be useful.</p>

<h2>With IPA</h2>

<p>If you&rsquo;re using IPA, though, with SSSD, it adds this to your /etc/ssh/ssh_config:</p>

<pre><code>GlobalKnownHostsFile /var/lib/sss/pubconf/known_hosts
</code></pre>

<p>This in turn disables the defaults, and it <strong>only</strong> checks /etc/ssh/ssh_known_hosts2. <strong>Not</strong> /etc/ssh/ssh_known_hosts.</p>

<p>Fix is to use a target parameter, for the sshkey, to make sure you write to /etc/ssh/ssh_known_hosts2.</p>

<p>Not sure how I&rsquo;m going to get a bug opened on this. It&rsquo;s not a puppet bug at all. It&rsquo;s probably a bug for OpenSSH, but I don&rsquo;t have a binary that they build, so I can&rsquo;t submit a bug :(</p>

<p>BTW: for those that are interested: <code>strace ssh HOSTNAME</code> was how I found the details.  Since it stops and waits for the human to agree to add the host key to known_hosts, it&rsquo;s actually fairly easy to strace.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I'm Working On..]]></title>
    <link href="http://blog.mbarr.net/blog/2013/01/17/what-im-working-on/"/>
    <updated>2013-01-17T11:35:56-05:00</updated>
    <id>http://blog.mbarr.net/blog/2013/01/17/what-im-working-on</id>
    <content type="html"><![CDATA[<p>So, i&rsquo;ve been doing some work that others might care about.</p>

<p>I&rsquo;ll probably expand these into their own things, but i want them out of my head:</p>

<ol>
<li><p>Jenkins &ndash; puppet module.  Auto slave</p></li>
<li><p>Best practices for puppet modules: parameters?  How configurable?  Do we use parameters into the deeper parts, or can you use scoped variables? enterprise puppet modules:  repo&rsquo;s? code reusue?</p></li>
<li><p>module for puppet parseing?  should be trivial?  Maybe a Mergatron module for jenkins? or a long writeup of how to get it working from an ops perspective.</p></li>
<li><p>Meta modules discussion.  Compare the literature, from <a href="http://www.craigdunn.org/2012/05/239/">http://www.craigdunn.org/2012/05/239/</a></p></li>
</ol>


<p>&amp; to the lego brick :  <a href="http://sysadvent.blogspot.com/2012/12/day-13-configuration-management-as-legos.html">http://sysadvent.blogspot.com/2012/12/day-13-configuration-management-as-legos.html</a></p>
]]></content>
  </entry>
  
</feed>
